#include<iostream>
#include<graphics.h>
using namespace std;
int sign(float);
class pixel
{
public:
void bresen(int x1,int y1,int x2,int y2)
{
int s1,s2,x,y,i,exchange;
float dx,dy,G,temp;
dx=abs(x2-x1);
dy=abs(y2-y1);
x=x1;
y=y1;
s1=sign(x2-x1);
s2=sign(y2-y1);
if(dy>dx)
{
temp=dx;
dx=dy;
dy=temp;
exchange=1;
}
else
{
exchange=0;
G=2*dy-dx;
i=1;
}
while(i<=dx)
{
x=x+s1;
putpixel(x,y,WHITE);
if(G>=0)
{
y=y+s2;
G=G+2*dy-2*dx;
} 
else
{
G=G+2*dy;
i++;
}
}
}
};
int sign(float arg)
{
if(arg<0)
return -1;
else if(arg==0)
return 0;
else return 1;
}
class derive:public pixel
{
public:
int x1,y1,x2,y2;
void display()
{
cout<<"\nEnter the starting co-ordinate:";
cin>>x1>>y1;
cout<<"\nEnter ending co-ordinate:";
cin>>x2>>y2;
}
};
int main()
{
int gd=DETECT,gm;
derive d1;
d1.display();
initgraph(&gd,&gm,0);
d1.bresen(d1.x1,d1.y1,d1.x2,d1.y2);
getch();
closegraph();
return 0;
}
